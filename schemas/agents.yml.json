{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "agents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AgentConfig"
      }
    },
    "config_list": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModelConfig"
      },
      "description": "An array of configuration objects for different models"
    }
  },
  "required": ["agents"],
  "additionalProperties": false,
  "description": "Definition of `agents.yml` file. Generated by `npm run compile:schema` or `generate:schema`",
  "definitions": {
    "AgentConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Short name by which this agent is referred to in a UI etc. Used by VsCode"
        },
        "description": {
          "type": "string",
          "description": "A human-readable description explaining what this agent does. Used by VsCode & LLM-based routing"
        },
        "schema_version": {
          "type": "string",
          "description": "Required for compatibility with AIConfig."
        },
        "metadata": {
          "$ref": "#/definitions/AIConfigRootMetadata"
        },
        "prompts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AiConfigPrompt"
          }
        },
        "models": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of model names to filter `llm_config.model_list` by `model`"
        },
        "llm_config": {
          "$ref": "#/definitions/LlmConfig",
          "description": "config_list & LLM parameters { temperature: 0.7, max_tokens: 3000, config_list: [{ model: 'gpt-4', api_key: '...' }], ..."
        },
        "icon": {
          "type": "string",
          "description": "Icon for the agent shown in UI. Used by VsCode"
        },
        "sample_request": {
          "type": "string",
          "description": "When the user clicks this agent in `/help`, this text will be submitted to this slash command. Used by VsCode"
        },
        "vscode": {
          "type": "boolean",
          "description": "Should the agent be activated in VS Code chat?"
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlashCommand"
          },
          "description": "The list of slash commands for the agent Used by VsCode, could also be used by OpenAi function calling (with {input:string})"
        },
        "remote": {
          "type": "object",
          "properties": {
            "base_url": {
              "type": "string",
              "description": "The URL of the remote agent"
            }
          },
          "required": ["base_url"],
          "additionalProperties": false,
          "description": "Configuration for an Agent Protocol client agent"
        },
        "server": {
          "type": "object",
          "properties": {
            "port": {
              "type": "number",
              "default": 8000
            },
            "workspace": {
              "type": "string",
              "default": "./workspace"
            }
          },
          "additionalProperties": false
        },
        "cli": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The name of the command, eg: 'python'"
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Arguments to pass to the command. User prompt will be added after all args. Note that '${workspaceFolder}' will be replaced with the workspace path at run-time.",
              "examples": [["~/agents/my_agent.py", "--workspace", "${workspaceFolder}"]]
            },
            "cwd": {
              "type": "string",
              "description": "Working directory from which the process is spawned. If not specified, default to the current workding directory. VsCodeChatClient will default it to the workspace folder if a folder is open."
            },
            "image": {
              "type": "string",
              "description": "Docker image to run"
            },
            "wrap_output": {
              "type": "string"
            },
            "wait_for": {
              "type": ["string", "number"],
              "description": "A timeout (in ms) or string or /regex/ to scan for in the output to indicate the end of the command output"
            }
          },
          "required": ["command"],
          "additionalProperties": false,
          "description": "Configuration for a scripted agent Used by CliAgent"
        },
        "git": {
          "type": "object",
          "properties": {
            "repo": {
              "type": "string",
              "description": "Git repo from which the code can be downloaded"
            },
            "remote": {
              "type": "string",
              "description": "Defaults to 'origin'"
            },
            "branch": {
              "type": "string",
              "description": "Defaults to 'main'"
            },
            "baseDir": {
              "type": "string",
              "description": "Installation path"
            },
            "alwaysPull": {
              "type": "boolean",
              "description": "Should the latest code be pulled on every load?"
            },
            "options": {
              "type": "object",
              "properties": {
                "baseDir": {
                  "type": "string",
                  "description": "Base directory for all tasks run through this `simple-git` instance"
                },
                "binary": {
                  "type": "string",
                  "description": "Name of the binary the child processes will spawn - defaults to `git`"
                },
                "maxConcurrentProcesses": {
                  "type": "number",
                  "description": "Limit for the number of child processes that will be spawned concurrently"
                },
                "config": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Per-command configuration parameters to be passed with the `-c` switch to `git`",
                  "examples": [["user.name=John Doe"]]
                },
                "trimmed": {
                  "type": "boolean",
                  "description": "Enable trimming of trailing white-space in `git.raw`"
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["repo", "baseDir"],
          "additionalProperties": false
        },
        "workflow_base_path": {
          "type": "string",
          "description": "Base path for the workflow. The Agent will use a WorkflowManager to process workflow yaml files."
        },
        "routing": {
          "type": "object",
          "properties": {
            "rank": {
              "type": "number",
              "description": "Can be used to improve the ranking of the agent by AgentRegistry.searchAgents()"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The roles assigned to the agent, eg: developer, tester. Used by AgentRegistry"
            },
            "context": {
              "$ref": "#/definitions/AgentRoutingContext",
              "description": "The context in which the agent operates, eg: javascript, web... Used by AgentRegistry"
            },
            "team": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Names of other Agents in the team. Creates a RouterAgent"
            },
            "fallback": {
              "type": "string",
              "description": "If this agent can not handle a request, will delegate to the fallback"
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["name", "description"],
      "additionalProperties": false,
      "description": "Definition of an Agent - name, model/s or how to invoke it, etc."
    },
    "AIConfigRootMetadata": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Parameters key-value pairs that may be used in one or more text prompt inputs with the handlebars {{parameter_name}} syntax"
        },
        "models": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ModelSettings"
          },
          "description": "Globally defined model settings. Any prompts that use these models will have these settings applied by default, unless they override them with their own model settings"
        },
        "default_model": {
          "type": "string"
        },
        "model_parsers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "This is useful if you want to use a custom ModelParser for a model, or if a single ModelParser can handle multiple models.",
          "examples": [
            {
              "mistralai/Mistral-7B-v0.1": "HuggingFaceTextGenerationParser"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelSettings": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string"
        },
        "top_p": {
          "type": "number"
        },
        "max_tokens": {
          "type": "number"
        },
        "temperature": {
          "type": "number"
        },
        "system_prompt": {
          "type": "string"
        },
        "presence_penalty": {
          "type": "number"
        },
        "frequency_penalty": {
          "type": "number"
        }
      },
      "required": ["model"],
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "not": {}
          }
        ]
      }
    },
    "AiConfigPrompt": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A unique identifier for the prompt. This is used to reference the prompt."
        },
        "input": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "data": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
                      }
                    }
                  ],
                  "description": "Input to the model. This can represent a single input, or multiple inputs. The structure of the data object is up to the ModelParser. For example, a multi-modal ModelParser can choose to key the data by MIME type."
                }
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "The input prompt - this can be a string, or a complex object that represents one or more inputs (e.g. image URI and string prompt)."
        },
        "metadata": {
          "type": "object",
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "settings": {
                      "$ref": "#/definitions/ModelSettings"
                    }
                  },
                  "required": ["name", "settings"],
                  "additionalProperties": false
                }
              ],
              "description": "If this is undefined, the default_model specified in the root metadata will be used."
            },
            "parameters": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "Parameters key-value pairs that may be used in one or more text prompt inputs with the handlebars {{parameter_name}} syntax"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of string tags on the prompt"
            }
          },
          "additionalProperties": false,
          "description": "Prompt-specific metadata that applies to this prompt, containing things like model settings and prompt parameters. This gets merged with the root metadata, and takes precedence for overridden properties."
        },
        "outputs": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "output_type": {
                  "type": "string",
                  "const": "execute_result"
                },
                "execution_count": {
                  "type": "number",
                  "description": "A result's prompt number (0 based), if there are multiple outputs (e.g. multiple choices)."
                },
                "data": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
                      }
                    }
                  ],
                  "description": "The result of executing the prompt.",
                  "examples": [
                    {
                      "role": "assistant",
                      "content": "Sure, here is the resposne..."
                    }
                  ]
                },
                "mime_type": {
                  "type": "string",
                  "description": "The MIME type of the result. If not specified, the MIME type will be assumed to be plain text."
                },
                "metadata": {
                  "type": "object",
                  "description": "Output metadata."
                }
              },
              "required": ["output_type", "data"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "output_type": {
                  "type": "string",
                  "const": "error",
                  "description": "Type of output."
                },
                "ename": {
                  "type": "string",
                  "description": "The name of the error."
                },
                "evalue": {
                  "type": "string",
                  "description": "The value, or message, of the error."
                },
                "traceback": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The error's traceback, represented as an array of strings."
                }
              },
              "required": ["output_type", "ename", "evalue", "traceback"],
              "additionalProperties": false
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "output_type": {
                        "type": "string",
                        "const": "execute_result"
                      },
                      "execution_count": {
                        "type": "number",
                        "description": "A result's prompt number (0 based), if there are multiple outputs (e.g. multiple choices)."
                      },
                      "data": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          },
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
                            }
                          }
                        ],
                        "description": "The result of executing the prompt.",
                        "examples": [
                          {
                            "role": "assistant",
                            "content": "Sure, here is the resposne..."
                          }
                        ]
                      },
                      "mime_type": {
                        "type": "string",
                        "description": "The MIME type of the result. If not specified, the MIME type will be assumed to be plain text."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Output metadata."
                      }
                    },
                    "required": ["output_type", "data"],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "output_type": {
                        "type": "string",
                        "const": "error",
                        "description": "Type of output."
                      },
                      "ename": {
                        "type": "string",
                        "description": "The name of the error."
                      },
                      "evalue": {
                        "type": "string",
                        "description": "The value, or message, of the error."
                      },
                      "traceback": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The error's traceback, represented as an array of strings."
                      }
                    },
                    "required": ["output_type", "ename", "evalue", "traceback"],
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Optional array of outputs representing a previous inference run for this prompt"
        }
      },
      "required": ["name", "input"],
      "additionalProperties": false
    },
    "alias-1618911998-2811-2908-1618911998-0-4317": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "null"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/alias-1618911998-2811-2908-1618911998-0-4317"
          }
        }
      ]
    },
    "LlmConfig": {
      "type": "object",
      "properties": {
        "config_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelConfig"
          },
          "description": "An array of configuration objects for different models"
        },
        "model_settings": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ModelSettings"
          }
        }
      },
      "required": ["config_list"],
      "additionalProperties": false,
      "description": "If not provided, will be populated by filtering `config_list` by `models`."
    },
    "ModelConfig": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string",
          "description": "The model name. eg gpt-4"
        },
        "api_key": {
          "type": "string",
          "description": "The API key for the model (optional for local LLMs)"
        },
        "base_url": {
          "type": "string",
          "description": "The base URL for the API (optional)"
        },
        "api_type": {
          "type": "string",
          "description": "The type of the API, eg: azure, open_ai (optional)"
        },
        "api_version": {
          "type": "string",
          "description": "The version of the API (optional)"
        }
      },
      "required": ["model"],
      "additionalProperties": false,
      "description": "An array of these may be stored in a JSON file 'OAI_CONFIG_LIST'"
    },
    "SlashCommand": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the slash command"
        },
        "description": {
          "type": "string",
          "description": "The description of the slash command"
        },
        "sampleRequest": {
          "type": "string",
          "description": "When the user clicks this slash command in `/help`, this text will be submitted to this slash command"
        },
        "shouldRepopulate": {
          "type": "boolean",
          "description": "Whether executing the command puts the chat into a persistent mode, where the slash command is prepended to the chat input."
        },
        "followupPlaceholder": {
          "type": "string",
          "description": "Placeholder text to render in the chat input when the slash command has been repopulated. Has no effect if `shouldRepopulate` is `false`."
        }
      },
      "required": ["name", "description"],
      "additionalProperties": false,
      "description": "The list of slash commands for the agent Used by VsCode, could also be used by OpenAi function calling (with {input:string})"
    },
    "AgentRoutingContext": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/RoutingContextValues"
      },
      "description": "The context in which an agent can operate",
      "examples": [
        {
          "languages": ["typescript", "yaml"],
          "frameworks": ["nodejs"],
          "dependencies": ["openai"],
          "platforms": ["web", "vscode"]
        }
      ]
    },
    "RoutingContextValues": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "examples": [["typescript", "yaml"]]
    }
  }
}
